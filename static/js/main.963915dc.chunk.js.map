{"version":3,"sources":["api/users.ts","components/services/usersForSelect.tsx","components/services/userById.ts","components/TodoForm/TodoForm.tsx","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/services/newTodoId.ts","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","usersForSelect","usersFromServer","map","user","value","getUserById","userId","find","TodoForm","onAdd","useState","title","setTitle","hasTitleError","setHasTitleError","setUserId","hasUserError","setHasUserError","action","method","onSubmit","event","preventDefault","trim","completed","className","htmlFor","type","placeholder","onChange","newTitle","target","replace","disabled","UserInfo","href","TodoInfo","todo","cn","TodoList","todos","getNewTodoId","Math","max","preparedTodos","App","setTodos","newTodo","currentTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.963915dc.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import usersFromServer from '../../api/users';\n\nexport const usersForSelect = usersFromServer.map(user => (\n  <option value={user.id} key={user.id}>\n    {user.name}\n  </option>\n));\n","import usersFromServer from '../../api/users';\nimport { User } from '../types/user';\n\nexport function getUserById(userId: number): User | null {\n  return usersFromServer.find(user => user.id === userId) || null;\n}\n","import React, { useState } from 'react';\nimport './TodoForm.scss';\n\nimport { usersForSelect } from '../services/usersForSelect';\n\nimport { Todo } from '../types/todo';\nimport { getUserById } from '../services/userById';\n\ntype Props = {\n  onAdd: (todo: Todo) => void;\n};\n\nexport const TodoForm: React.FC<Props> = ({ onAdd }) => {\n  // #region state\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n\n  const [userId, setUserId] = useState(0);\n  const [hasUserError, setHasUserError] = useState(false);\n  // #endregion\n  // #region change handlers\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = event.target.value.replace(/[^a-zA-Za-яА-Я0-9\\s]/g, '');\n\n    setTitle(newTitle);\n    setHasTitleError(false);\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setHasUserError(false);\n  };\n  // #endregion\n\n  const reset = () => {\n    setTitle('');\n    setUserId(0);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setHasTitleError(!title);\n    setHasUserError(!userId);\n\n    if (!title.trim() || userId === 0) {\n      return;\n    }\n\n    onAdd({\n      id: 0,\n      title,\n      completed: false,\n      userId,\n      user: getUserById(userId),\n    });\n\n    reset();\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\">\n        <label\n          className=\"label\"\n          htmlFor=\"todo-title\"\n        >\n          {'Title: '}\n        </label>\n\n        <input\n          id=\"todo-title\"\n          type=\"text\"\n          data-cy=\"titleInput\"\n          placeholder=\"Enter a title\"\n          value={title}\n          onChange={handleTitleChange}\n        />\n        {hasTitleError && (\n          <span className=\"error\">\n            Please enter a title\n          </span>\n        )}\n      </div>\n\n      <div className=\"field\">\n        <label\n          className=\"label\"\n          htmlFor=\"todo-user\"\n        >\n          {'User: '}\n        </label>\n        <select\n          data-cy=\"userSelect\"\n          id=\"todo-user\"\n          value={userId}\n          onChange={handleUserChange}\n        >\n          <option value=\"0\" disabled>\n            Choose a user\n          </option>\n\n          {usersForSelect}\n        </select>\n\n        {hasUserError && (\n          <span className=\"error\">\n            Please choose a user\n          </span>\n        )}\n      </div>\n\n      <button\n        type=\"submit\"\n        data-cy=\"submitButton\"\n      >\n        Add\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport { User } from '../types/user';\n\ninterface Props {\n  user: User;\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\n\nimport { Todo } from '../types/todo';\nimport { UserInfo } from '../UserInfo';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      key={todo.id}\n      data-id={todo.id}\n      className={cn('TodoInfo', {\n        'TodoInfo--completed': todo.completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n      {todo.user && (\n        <UserInfo user={todo.user} />\n      )}\n    </article>\n  );\n};\n","import React from 'react';\n\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../types/todo';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","import { Todo } from '../types/todo';\n\nexport function getNewTodoId(todos: Todo[]) {\n  const maxId = Math.max(\n    ...todos.map(todo => todo.id),\n  );\n\n  return maxId + 1;\n}\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport todosFromServer from './api/todos';\n\nimport { Todo } from './components/types/todo';\nimport { TodoForm } from './components/TodoForm';\nimport { TodoList } from './components/TodoList';\nimport { getUserById } from './components/services/userById';\nimport { getNewTodoId } from './components/services/newTodoId';\n\nconst preparedTodos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>(preparedTodos);\n\n  const addTodo = (todo: Todo) => {\n    const newTodo = {\n      ...todo,\n      id: getNewTodoId(todos),\n    };\n\n    setTodos(currentTodos => [...currentTodos, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm onAdd={addTodo} />\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}