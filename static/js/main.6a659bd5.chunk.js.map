{"version":3,"sources":["components/UserInfo/UserInfo.tsx","api/users.ts","components/services/userById.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/services/usersForSelect.tsx","components/services/newTodoId.ts","api/todos.ts","components/TodoForm/TodoForm.tsx","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","id","username","getUserById","userId","usersFromServer","find","TodoInfo","todos","map","todo","Number","cn","completed","title","TodoList","usersForSelect","value","getNewTodoId","Math","max","TodoForm","onSubmit","useState","setTitle","hasTitleError","setHasTitleError","setUser","hasUserError","setHasUserError","action","method","event","preventDefault","htmlFor","type","placeholder","onChange","newTitle","target","replace","disabled","initialTodos","App","setTodos","data","newTodo","currentTodos","ReactDOM","render","document","getElementById"],"mappings":"oPAOaA,EAAoC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAClD,OAAKA,EAKH,mBAAGC,UAAU,WAAWC,KAAI,iBAAYF,EAAKG,OAA7C,SACGH,EAAKI,OALD,sBAAMH,UAAU,WAAhB,2BCTI,GACb,CACEI,GAAI,EACJD,KAAM,gBACNE,SAAU,OACVH,MAAO,qBAET,CACEE,GAAI,EACJD,KAAM,eACNE,SAAU,YACVH,MAAO,qBAET,CACEE,GAAI,EACJD,KAAM,mBACNE,SAAU,WACVH,MAAO,sBAET,CACEE,GAAI,EACJD,KAAM,mBACNE,SAAU,WACVH,MAAO,6BAET,CACEE,GAAI,EACJD,KAAM,mBACNE,SAAU,SACVH,MAAO,4BAET,CACEE,GAAI,EACJD,KAAM,uBACNE,SAAU,mBACVH,MAAO,2BAET,CACEE,GAAI,EACJD,KAAM,kBACNE,SAAU,eACVH,MAAO,0BAET,CACEE,GAAI,EACJD,KAAM,2BACNE,SAAU,gBACVH,MAAO,wBAET,CACEE,GAAI,EACJD,KAAM,kBACNE,SAAU,WACVH,MAAO,2BAET,CACEE,GAAI,GACJD,KAAM,qBACNE,SAAU,iBACVH,MAAO,2BCxDJ,SAASI,EAAYC,GAC1B,OAAOC,EAAgBC,MAAK,SAAAV,GAAI,OAAIA,EAAKK,KAAOG,MAAW,KCMtD,IAAMG,EAAoC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAClD,OACE,8BACGA,EAAMC,KAAI,SAAAC,GACT,IAAMd,EAAOO,EAAYQ,OAAOD,EAAKN,SAErC,OACE,0BAEE,UAASM,EAAKT,GACdJ,UAAWe,IAAG,WAAY,CACxB,sBAAuBF,EAAKG,YAJhC,UAOE,oBAAIhB,UAAU,kBAAd,SACGa,EAAKI,QAEPlB,GAAQ,cAAC,EAAD,CAAUA,KAAMA,MATpBc,EAAKT,UCXTc,EAAoC,SAAC,GAAe,IAAbP,EAAY,EAAZA,MAClD,OACE,yBAASX,UAAU,WAAnB,SACE,cAAC,EAAD,CAAUW,MAAOA,OCRVQ,EAAiBX,EAAgBI,KAAI,SAAAb,GAAI,OACpD,wBAAQqB,MAAOrB,EAAKK,GAApB,SACGL,EAAKI,MADqBJ,EAAKK,OCD7B,SAASiB,EAAaV,GAK3B,OAJcW,KAAKC,IAAL,MAAAD,KAAI,YACbX,EAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKT,QAGb,ECPF,OACb,CACEA,GAAI,EACJa,MAAO,qBACPD,WAAW,EACXT,OAAQ,GAEV,CACEH,GAAI,GACJa,MAAO,kBACPD,WAAW,EACXT,OAAQ,GAEV,CACEH,GAAI,EACJa,MAAO,qCACPD,WAAW,EACXT,OAAQ,ICNCiB,EAA4B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAE1C,EAA0BC,mBAAS,IAAnC,mBAAOT,EAAP,KAAcU,EAAd,KACA,EAA0CD,oBAAS,GAAnD,mBAAOE,EAAP,KAAsBC,EAAtB,KAEA,EAAwBH,mBAAS,GAAjC,mBAAO3B,EAAP,KAAa+B,EAAb,KACA,EAAwCJ,oBAAS,GAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAqCA,OACE,uBACEC,OAAO,aACPC,OAAO,OACPT,SAzBiB,SAACU,GAA4B,IAAD,EAC/CA,EAAMC,iBAENP,GAAkBZ,GAClBe,GAAiBjC,GAEZkB,GAAUlB,IAIf0B,EAAS,CACPrB,GAAIiB,EAAaV,GACjBM,QACAV,OAAM,UAAED,EAAYP,UAAd,aAAE,EAAmBK,GAC3BY,WAAW,IAGbW,EAAS,IACTG,EAAQ,KAIR,UAKE,sBAAK9B,UAAU,QAAf,UACE,uBACEA,UAAU,QACVqC,QAAQ,aAFV,SAIG,YAGH,uBACEjC,GAAG,aACHkC,KAAK,OACL,UAAQ,aACRC,YAAY,gBACZnB,MAAOH,EACPuB,SAtDkB,SAACL,GACzB,IAAMM,EAAWN,EAAMO,OAAOtB,MAAMuB,QAAQ,uCAAyB,IAErEhB,EAASc,GACTZ,GAAiB,MAoDZD,GACC,sBAAM5B,UAAU,QAAhB,qCAMJ,sBAAKA,UAAU,QAAf,UACE,uBACEA,UAAU,QACVqC,QAAQ,YAFV,SAIG,WAEH,yBACE,UAAQ,aACRjC,GAAG,YACHgB,MAAOrB,EACPyC,SAnEiB,SAACL,GACxBL,GAASK,EAAMO,OAAOtB,OACtBY,GAAgB,IA6DZ,UAME,wBAAQZ,MAAM,IAAIwB,UAAQ,EAA1B,2BAICzB,KAGFY,GACC,sBAAM/B,UAAU,QAAhB,qCAMJ,wBACEsC,KAAK,SACL,UAAQ,eAFV,qB,SCtGAO,EAAuBrC,EAAgBI,KAAI,SAAAC,GAAI,MAAK,CACxDT,GAAIS,EAAKT,GACTa,MAAOJ,EAAKV,KACZI,OAAQM,EAAKT,GACbY,WAAW,MAGA8B,EAAgB,WAC3B,MAA0BpB,mBAAiBmB,GAA3C,mBAAOlC,EAAP,KAAcoC,EAAd,KAWA,OACE,sBAAK/C,UAAU,MAAf,UACE,+CAEA,cAAC,EAAD,CAAUyB,SAbE,SAAC,GAA0B,EAAxBrB,GAAyB,IAAlB4C,EAAiB,iBACnCC,EAAO,2BACRD,GADQ,IAEX5C,GAAIiB,EAAaV,KAGnBoC,GAAS,SAAAG,GAAY,4BAAQA,GAAR,CAAsBD,UAQzC,cAAC,EAAD,CAAUtC,MAAOA,QC7BvBwC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.6a659bd5.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../types/user';\n\ninterface UserInfoProps {\n  user?: User;\n}\n\nexport const UserInfo: React.FC<UserInfoProps> = ({ user }) => {\n  if (!user) {\n    return <span className=\"UserInfo\">Unknown User</span>;\n  }\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import usersFromServer from '../../api/users';\nimport { User } from '../types/user';\n\nexport function getUserById(userId: number): User | null {\n  return usersFromServer.find(user => user.id === userId) || null;\n}\n","import cn from 'classnames';\n// import todosFromServer from '../../api/todos';\nimport { UserInfo } from '../UserInfo';\nimport { getUserById } from '../services/userById';\nimport { Todo } from '../types/todo';\n\ninterface TodoInfoProps {\n  todos: Todo[];\n}\n\nexport const TodoInfo: React.FC<TodoInfoProps> = ({ todos }) => {\n  return (\n    <div>\n      {todos.map(todo => {\n        const user = getUserById(Number(todo.userId));\n\n        return (\n          <article\n            key={todo.id}\n            data-id={todo.id}\n            className={cn('TodoInfo', {\n              'TodoInfo--completed': todo.completed,\n            })}\n          >\n            <h2 className=\"TodoInfo__title\">\n              {todo.title}\n            </h2>\n            {user && <UserInfo user={user} />}\n          </article>\n        );\n      })}\n    </div>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../types/todo';\n\ninterface TodoListProps {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      <TodoInfo todos={todos} />\n    </section>\n  );\n};\n","import usersFromServer from '../../api/users';\n\nexport const usersForSelect = usersFromServer.map(user => (\n  <option value={user.id} key={user.id}>\n    {user.name}\n  </option>\n));\n","import { Todo } from '../types/todo';\n\nexport function getNewTodoId(todos: Todo[]) {\n  const maxId = Math.max(\n    ...todos.map(todo => todo.id),\n  );\n\n  return maxId + 1;\n}\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React, { useState } from 'react';\nimport { getUserById } from '../services/userById';\nimport { usersForSelect } from '../services/usersForSelect';\nimport { Todo } from '../types/todo';\nimport { getNewTodoId } from '../services/newTodoId';\nimport todos from '../../api/todos';\n\ninterface Props {\n  onSubmit: (todo: Todo) => void;\n}\n\nexport const TodoForm: React.FC<Props> = ({ onSubmit }) => {\n  // #region state\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n\n  const [user, setUser] = useState(0);\n  const [hasUserError, setHasUserError] = useState(false);\n  // #endregion\n  // #region change handlers\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = event.target.value.replace(/[^a-zA-Za-яА-Я0-9\\s]/g, '');\n\n    setTitle(newTitle);\n    setHasTitleError(false);\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUser(+event.target.value);\n    setHasUserError(false);\n  };\n  // #endregion\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setHasTitleError(!title);\n    setHasUserError(!user);\n\n    if (!title || !user) {\n      return;\n    }\n\n    onSubmit({\n      id: getNewTodoId(todos),\n      title,\n      userId: getUserById(user)?.id,\n      completed: false,\n    });\n\n    setTitle('');\n    setUser(0);\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\">\n        <label\n          className=\"label\"\n          htmlFor=\"todo-title\"\n        >\n          {'Title: '}\n        </label>\n\n        <input\n          id=\"todo-title\"\n          type=\"text\"\n          data-cy=\"titleInput\"\n          placeholder=\"Enter a title\"\n          value={title}\n          onChange={handleTitleChange}\n        />\n        {hasTitleError && (\n          <span className=\"error\">\n            Please enter a title\n          </span>\n        )}\n      </div>\n\n      <div className=\"field\">\n        <label\n          className=\"label\"\n          htmlFor=\"todo-user\"\n        >\n          {'User: '}\n        </label>\n        <select\n          data-cy=\"userSelect\"\n          id=\"todo-user\"\n          value={user}\n          onChange={handleUserChange}\n        >\n          <option value=\"0\" disabled>\n            Choose a user\n          </option>\n\n          {usersForSelect}\n        </select>\n\n        {hasUserError && (\n          <span className=\"error\">\n            Please choose a user\n          </span>\n        )}\n      </div>\n\n      <button\n        type=\"submit\"\n        data-cy=\"submitButton\"\n      >\n        Add\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { TodoForm } from './components/TodoForm';\nimport { Todo } from './components/types/todo';\nimport usersFromServer from './api/users';\nimport { getNewTodoId } from './components/services/newTodoId';\n\nconst initialTodos: Todo[] = usersFromServer.map(todo => ({\n  id: todo.id,\n  title: todo.name,\n  userId: todo.id,\n  completed: false,\n}));\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>(initialTodos);\n\n  const addTodo = ({ id, ...data }: Todo) => {\n    const newTodo = {\n      ...data,\n      id: getNewTodoId(todos),\n    };\n\n    setTodos(currentTodos => [...currentTodos, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm onSubmit={addTodo} />\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}